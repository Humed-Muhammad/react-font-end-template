import React, { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
} from "@/components/ui/navigation-menu";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  Video,
  Image,
  FileText,
  Mic,
  Palette,
  Code,
  Menu,
  X,
  Sparkles,
  Zap,
  Crown,
  User,
  Settings,
  LogOut,
  PenTool,
  Camera,
  Music,
  Globe,
  Wand2,
  Brain,
  Rocket,
  Car,
} from "lucide-react";
import { Link, useNavigate } from "react-router-dom";
import { useAuthState } from "react-firebase-hooks/auth";
import { auth } from "@/utils/firebase";
import { signOut } from "firebase/auth";

const services = [
  {
    title: "Video Generation",
    description: "Create stunning faceless videos with AI",
    icon: <Video className="h-6 w-6" />,
    href: "/video-generation",
    color: "from-purple-500 to-pink-500",
    badge: "Popular",
  },
  {
    title: "Image Generation",
    description: "Generate beautiful images from text prompts",
    icon: <Image className="h-6 w-6" />,
    href: "/image-generation",
    color: "from-blue-500 to-cyan-500",
    badge: "New",
  },
  {
    title: "Blog Post Writing",
    description: "AI-powered content creation for blogs",
    icon: <FileText className="h-6 w-6" />,
    href: "/blog-generation",
    color: "from-green-500 to-emerald-500",
    badge: null,
  },
  {
    title: "Voice Synthesis",
    description: "Natural AI voices in multiple languages",
    icon: <Mic className="h-6 w-6" />,
    href: "/voice-synthesis",
    color: "from-orange-500 to-red-500",
    badge: null,
  },
  {
    title: "Logo Design",
    description: "Professional logos generated by AI",
    icon: <Palette className="h-6 w-6" />,
    href: "/logo-design",
    color: "from-indigo-500 to-purple-500",
    badge: "Coming Soon",
  },
  {
    title: "Code Generation",
    description: "AI-assisted code writing and debugging",
    icon: <Code className="h-6 w-6" />,
    href: "/code-generation",
    color: "from-gray-500 to-slate-500",
    badge: "Beta",
  },
];

const tools = [
  {
    title: "Video Editor",
    description: "Advanced video editing tools",
    icon: <PenTool className="h-5 w-5" />,
    href: "/tools/video-editor",
  },
  {
    title: "Screen Recorder",
    description: "Record your screen in HD",
    icon: <Camera className="h-5 w-5" />,
    href: "/tools/screen-recorder",
  },
  {
    title: "Audio Studio",
    description: "Professional audio editing",
    icon: <Music className="h-5 w-5" />,
    href: "/tools/audio-studio",
  },
  {
    title: "Translation Hub",
    description: "Translate content to 100+ languages",
    icon: <Globe className="h-5 w-5" />,
    href: "/tools/translation",
  },
];

const resources = [
  {
    title: "Getting Started",
    description: "Learn the basics of AI content creation",
    href: "/docs/getting-started",
  },
  {
    title: "API Documentation",
    description: "Integrate our AI into your applications",
    href: "/docs/api",
  },
  {
    title: "Templates",
    description: "Pre-made templates for quick creation",
    href: "/templates",
  },
  {
    title: "Community",
    description: "Join our creator community",
    href: "/community",
  },
];

export const Navbar: React.FC = () => {
  const [user, loading] = useAuthState(auth);
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 20);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const handleSignOut = async () => {
    try {
      await signOut(auth);
      navigate("/");
    } catch (error) {
      console.error("Error signing out:", error);
    }
  };

  const getUserInitials = (displayName: string | null) => {
    if (!displayName) return "U";
    return displayName
      .split(" ")
      .map((name) => name[0])
      .join("")
      .toUpperCase()
      .slice(0, 2);
  };

  return (
    <motion.nav
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.6, ease: "easeOut" }}
      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${
        isScrolled
          ? "bg-white/80 dark:bg-slate-900/80 backdrop-blur-xl border-b border-slate-200/50 dark:border-slate-700/50 shadow-lg shadow-slate-900/5"
          : "bg-transparent"
      }`}
    >
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16 lg:h-20">
          {/* Logo */}
          <Link to="/" className="flex items-center space-x-3 group">
            <motion.div
              whileHover={{ rotate: 360 }}
              transition={{ duration: 0.6 }}
              className="relative"
            >
              <div className="w-10 h-10 bg-gradient-to-r from-purple-600 to-pink-600 rounded-xl flex items-center justify-center shadow-lg group-hover:shadow-purple-500/25 transition-all duration-300">
                <Wand2 className="h-6 w-6 text-white" />
              </div>
              <div className="absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-r from-yellow-400 to-orange-400 rounded-full flex items-center justify-center">
                <Sparkles className="h-2 w-2 text-white" />
              </div>
            </motion.div>
            <div className="hidden sm:block">
              <h1 className="text-xl font-bold bg-gradient-to-r from-slate-900 to-slate-600 dark:from-white dark:to-slate-300 bg-clip-text text-transparent">
                CreativeAI
              </h1>
              <p className="text-xs text-slate-500 dark:text-slate-400 -mt-1">
                AI-Powered Creation
              </p>
            </div>
          </Link>

          {/* Desktop Navigation */}
          <div className="hidden lg:flex items-center space-x-8">
            <NavigationMenu>
              <NavigationMenuList className="space-x-2">
                {/* Services */}
                <NavigationMenuItem>
                  <NavigationMenuTrigger className="bg-transparent hover:bg-slate-100 dark:hover:bg-slate-800 data-[state=open]:bg-slate-100 dark:data-[state=open]:bg-slate-800 transition-colors">
                    <Brain className="h-4 w-4 mr-2" />
                    Services
                  </NavigationMenuTrigger>
                  <NavigationMenuContent>
                    <div className="grid w-[800px] grid-cols-2 gap-4 p-6">
                      {services.map((service, index) => (
                        <motion.div
                          key={service.title}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: index * 0.1 }}
                        >
                          <NavigationMenuLink asChild>
                            <Link
                              to={service.href}
                              className="group block p-4 rounded-xl hover:bg-slate-50 dark:hover:bg-slate-800 transition-all duration-200"
                            >
                              <div className="flex items-start space-x-4">
                                <div
                                  className={`p-2 rounded-lg bg-gradient-to-r ${service.color} text-white group-hover:scale-110 transition-transform duration-200`}
                                >
                                  {service.icon}
                                </div>
                                <div className="flex-1">
                                  <div className="flex items-center space-x-2 mb-1">
                                    <h3 className="font-semibold text-slate-900 dark:text-white group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors">
                                      {service.title}
                                    </h3>
                                    {service.badge && (
                                      <Badge
                                        variant={
                                          service.badge === "New"
                                            ? "default"
                                            : service.badge === "Popular"
                                            ? "secondary"
                                            : "outline"
                                        }
                                        className="text-xs"
                                      >
                                        {service.badge}
                                      </Badge>
                                    )}
                                  </div>
                                  <p className="text-sm text-slate-600 dark:text-slate-400">
                                    {service.description}
                                  </p>
                                </div>
                              </div>
                            </Link>
                          </NavigationMenuLink>
                        </motion.div>
                      ))}
                    </div>
                  </NavigationMenuContent>
                </NavigationMenuItem>

                {/* Tools */}
                <NavigationMenuItem>
                  <NavigationMenuTrigger className="bg-transparent hover:bg-slate-100 dark:hover:bg-slate-800 data-[state=open]:bg-slate-100 dark:data-[state=open]:bg-slate-800 transition-colors">
                    <Zap className="h-4 w-4 mr-2" />
                    Tools
                  </NavigationMenuTrigger>
                  <NavigationMenuContent>
                    <div className="w-[400px] p-6">
                      <div className="grid gap-3">
                        {tools.map((tool, index) => (
                          <motion.div
                            key={tool.title}
                            initial={{ opacity: 0, x: -20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ delay: index * 0.1 }}
                          >
                            <NavigationMenuLink asChild>
                              <Link
                                to={tool.href}
                                className="group space-x-3 p-3 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-800 transition-all duration-200"
                              >
                                <div className="p-2 rounded-md w-max dark:bg-slate-700 group-hover:bg-purple-100 dark:group-hover:bg-purple-900 transition-colors">
                                  {tool.icon}
                                </div>
                                <div>
                                  <h3 className="font-medium text-slate-900 dark:text-white group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors">
                                    {tool.title}
                                  </h3>
                                  <p className="text-sm text-slate-600 dark:text-slate-400">
                                    {tool.description}
                                  </p>
                                </div>
                              </Link>
                            </NavigationMenuLink>
                          </motion.div>
                        ))}
                      </div>
                    </div>
                  </NavigationMenuContent>
                </NavigationMenuItem>

                {/* Resources */}
                <NavigationMenuItem>
                  <NavigationMenuTrigger className="gap-2 bg-transparent hover:bg-slate-100 dark:hover:bg-slate-800 data-[state=open]:bg-slate-100 dark:data-[state=open]:bg-slate-800 transition-colors">
                    <Car />
                    Resources
                  </NavigationMenuTrigger>
                  <NavigationMenuContent>
                    <div className="w-[300px] p-6">
                      <div className="grid gap-3">
                        {resources.map((resource, index) => (
                          <motion.div
                            key={resource.title}
                            initial={{ opacity: 0, x: -20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ delay: index * 0.1 }}
                          >
                            <NavigationMenuLink asChild>
                              <Link
                                to={resource.href}
                                className="group block p-3 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-800 transition-all duration-200"
                              >
                                <h3 className="font-medium text-slate-900 dark:text-white group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors mb-1">
                                  {resource.title}
                                </h3>
                                <p className="text-sm text-slate-600 dark:text-slate-400">
                                  {resource.description}
                                </p>
                              </Link>
                            </NavigationMenuLink>
                          </motion.div>
                        ))}
                      </div>
                    </div>
                  </NavigationMenuContent>
                </NavigationMenuItem>

                {/* Pricing */}
                <NavigationMenuItem>
                  <NavigationMenuLink asChild>
                    <Link
                      to="/pricing"
                      className="group flex flex-row items-center justify-center rounded-md bg-transparent px-4 py-2 text-sm font-medium transition-colors hover:bg-slate-100 dark:hover:bg-slate-800 focus:bg-slate-100 dark:focus:bg-slate-800 focus:text-slate-900 dark:focus:text-slate-50 disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-slate-100/50 dark:data-[active]:bg-slate-800/50 data-[state=open]:bg-slate-100/50 dark:data-[state=open]:bg-slate-800/50"
                    >
                      <Crown className="h-4 w-4 mr-2" />
                      Pricing
                    </Link>
                  </NavigationMenuLink>
                </NavigationMenuItem>
              </NavigationMenuList>
            </NavigationMenu>
          </div>

          {/* Right Side Actions */}
          <div className="flex items-center space-x-4">
            {!loading && (
              <>
                {user ? (
                  /* User Menu */
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button
                        variant="ghost"
                        className="relative h-10 w-10 rounded-full hover:bg-slate-100 dark:hover:bg-slate-800"
                      >
                        <Avatar className="h-10 w-10">
                          <AvatarImage
                            src={user.photoURL || ""}
                            alt={user.displayName || "User"}
                          />
                          <AvatarFallback className="bg-gradient-to-r from-purple-500 to-pink-500 text-white font-semibold">
                            {getUserInitials(user.displayName)}
                          </AvatarFallback>
                        </Avatar>
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent
                      className="w-56"
                      align="end"
                      forceMount
                    >
                      <div className="flex flex-col space-y-1 p-2">
                        <p className="text-sm font-medium leading-none">
                          {user.displayName || "User"}
                        </p>
                        <p className="text-xs leading-none text-slate-600 dark:text-slate-400">
                          {user.email}
                        </p>
                      </div>
                      <DropdownMenuSeparator />
                      <DropdownMenuItem asChild>
                        <Link to="/dashboard" className="cursor-pointer">
                          <User className="mr-2 h-4 w-4" />
                          <span>Dashboard</span>
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild>
                        <Link to="/settings" className="cursor-pointer">
                          <Settings className="mr-2 h-4 w-4" />
                          <span>Settings</span>
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuSeparator />
                      <DropdownMenuItem
                        className="cursor-pointer text-red-600 dark:text-red-400"
                        onClick={handleSignOut}
                      >
                        <LogOut className="mr-2 h-4 w-4" />
                        <span>Log out</span>
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                ) : (
                  /* Auth Buttons */
                  <div className="hidden sm:flex items-center space-x-3">
                    <Button
                      variant="ghost"
                      asChild
                      className="hover:bg-slate-100 dark:hover:bg-slate-800"
                    >
                      <Link to="/login">Sign In</Link>
                    </Button>
                    <Button
                      asChild
                      className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-lg hover:shadow-purple-500/25 transition-all duration-300"
                    >
                      <Link to="/signup">
                        <Rocket className="h-4 w-4 mr-2" />
                        Get Started
                      </Link>
                    </Button>
                  </div>
                )}

                {/* Mobile Menu Button */}
                <Button
                  variant="ghost"
                  size="sm"
                  className="lg:hidden"
                  onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
                >
                  {isMobileMenuOpen ? (
                    <X className="h-5 w-5" />
                  ) : (
                    <Menu className="h-5 w-5" />
                  )}
                </Button>
              </>
            )}
          </div>
        </div>

        {/* Mobile Menu */}
        <AnimatePresence>
          {isMobileMenuOpen && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
              className="lg:hidden border-t border-slate-200 dark:border-slate-700 bg-white/95 dark:bg-slate-900/95 backdrop-blur-xl"
            >
              <div className="px-4 py-6 space-y-6">
                {/* Mobile Services */}
                <div>
                  <h3 className="font-semibold text-slate-900 dark:text-white mb-3 flex items-center">
                    <Brain className="h-4 w-4 mr-2" />
                    Services
                  </h3>
                  <div className="grid grid-cols-1 gap-3 pl-6">
                    {services.slice(0, 4).map((service) => (
                      <Link
                        key={service.title}
                        to={service.href}
                        className="flex items-center space-x-3 p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors"
                        onClick={() => setIsMobileMenuOpen(false)}
                      >
                        <div
                          className={`p-1.5 rounded-md bg-gradient-to-r ${service.color} text-white`}
                        >
                          {service.icon}
                        </div>
                        <span className="text-sm font-medium text-slate-700 dark:text-slate-300">
                          {service.title}
                        </span>
                        {service.badge && (
                          <Badge variant="outline" className="text-xs">
                            {service.badge}
                          </Badge>
                        )}
                      </Link>
                    ))}
                  </div>
                </div>

                {/* Mobile Tools */}
                <div>
                  <h3 className="font-semibold text-slate-900 dark:text-white mb-3 flex items-center">
                    <Zap className="h-4 w-4 mr-2" />
                    Tools
                  </h3>
                  <div className="grid grid-cols-1 gap-3 pl-6">
                    {tools.map((tool) => (
                      <Link
                        key={tool.title}
                        to={tool.href}
                        className="flex items-center space-x-3 p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors"
                        onClick={() => setIsMobileMenuOpen(false)}
                      >
                        <div className="p-1.5 rounded-md bg-slate-100 dark:bg-slate-700">
                          {tool.icon}
                        </div>
                        <span className="text-sm font-medium text-slate-700 dark:text-slate-300">
                          {tool.title}
                        </span>
                      </Link>
                    ))}
                  </div>
                </div>

                {/* Mobile Navigation Links */}
                <div className="space-y-3">
                  <Link
                    to="/pricing"
                    className="flex items-center space-x-3 p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors"
                    onClick={() => setIsMobileMenuOpen(false)}
                  >
                    <Crown className="h-4 w-4" />
                    <span className="font-medium text-slate-700 dark:text-slate-300">
                      Pricing
                    </span>
                  </Link>
                </div>

                {/* Mobile Auth Buttons */}
                {!user && (
                  <div className="space-y-3 pt-4 border-t border-slate-200 dark:border-slate-700">
                    <Button
                      variant="outline"
                      className="w-full"
                      asChild
                      onClick={() => setIsMobileMenuOpen(false)}
                    >
                      <Link to="/login">Sign In</Link>
                    </Button>
                    <Button
                      className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white"
                      asChild
                      onClick={() => setIsMobileMenuOpen(false)}
                    >
                      <Link to="/signup">
                        <Rocket className="h-4 w-4 mr-2" />
                        Get Started
                      </Link>
                    </Button>
                  </div>
                )}

                {/* Mobile User Menu */}
                {user && (
                  <div className="space-y-3 pt-4 border-t border-slate-200 dark:border-slate-700">
                    <div className="flex items-center space-x-3 p-2">
                      <Avatar className="h-8 w-8">
                        <AvatarImage
                          src={user.photoURL || ""}
                          alt={user.displayName || "User"}
                        />
                        <AvatarFallback className="bg-gradient-to-r from-purple-500 to-pink-500 text-white text-sm">
                          {getUserInitials(user.displayName)}
                        </AvatarFallback>
                      </Avatar>
                      <div>
                        <p className="text-sm font-medium text-slate-900 dark:text-white">
                          {user.displayName || "User"}
                        </p>
                        <p className="text-xs text-slate-600 dark:text-slate-400">
                          {user.email}
                        </p>
                      </div>
                    </div>
                    <Link
                      to="/dashboard"
                      className="flex items-center space-x-3 p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors"
                      onClick={() => setIsMobileMenuOpen(false)}
                    >
                      <User className="h-4 w-4" />
                      <span className="text-sm font-medium text-slate-700 dark:text-slate-300">
                        Dashboard
                      </span>
                    </Link>
                    <Link
                      to="/settings"
                      className="flex items-center space-x-3 p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors"
                      onClick={() => setIsMobileMenuOpen(false)}
                    >
                      <Settings className="h-4 w-4" />
                      <span className="text-sm font-medium text-slate-700 dark:text-slate-300">
                        Settings
                      </span>
                    </Link>
                    <button
                      onClick={() => {
                        handleSignOut();
                        setIsMobileMenuOpen(false);
                      }}
                      className="flex items-center space-x-3 p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors w-full text-left text-red-600 dark:text-red-400"
                    >
                      <LogOut className="h-4 w-4" />
                      <span className="text-sm font-medium">Log out</span>
                    </button>
                  </div>
                )}
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </motion.nav>
  );
};
